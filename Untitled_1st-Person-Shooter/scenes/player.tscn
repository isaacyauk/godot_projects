[gd_scene load_steps=19 format=3 uid="uid://tn7jgwmmilmk"]

[ext_resource type="PackedScene" uid="uid://q4yxjqaop64g" path="res://blender-saves/heavy-repeater.blend" id="2_oh2r0"]
[ext_resource type="Script" path="res://scripts/PlayerUI/reticle.gd" id="3_jll14"]
[ext_resource type="Theme" uid="uid://cnhwnw5k35xdg" path="res://ui-and-themes/debug.tres" id="5_p0hi4"]

[sub_resource type="GDScript" id="GDScript_v670p"]
script/source = "extends CharacterBody3D


# The TILT vars allow you to clamp the camera looking to straight up and down. @export for quick tweaking.
@export var TILT_LOWER_LIMIT := deg_to_rad(-90.0)
@export var TILT_UPPER_LIMIT := deg_to_rad(90.0)
@export var CAMERA_CONTROLLER : Node3D
@export var MOUSE_SENSITIVITY : float = 0.25
@export var ANIMATION_PLAYER : AnimationPlayer
@export_range(5, 10, 0.1) var CROUCH_SPEED : float = 7.0 	# This makes the animation run 7 times faster 
@export var CROUCH_SHAPECAST : Node3D
@export var TOGGLE_CROUCH : bool = true
@export var SPEED_SPRING : float = 7
@export var SPEED_DEFAULT : float = 5.0
@export var SPEED_CROUCH : float = 2.0
@export var JUMP_VELOCITY = 4.5
@export var ACCELERATION : float = 0.1
@export var DECELERATION : float = 0.25


var _speed : float
var _mouse_input : bool = false
var _mouse_rotation : Vector3
var _rotation_input : float
var _tilt_input : float
var _player_rotation : Vector3
var _camera_rotation : Vector3
var _is_crouching : bool = false

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

func _input(event):
	if event.is_action_pressed(\"quick_exit\"):
		get_tree().quit()
	if event.is_action_pressed(\"crouch\") and is_on_floor():
		toggle_crouch()
		
	# Input check conditions if Toggle Crouch option is disabled.
	if event.is_action_pressed(\"crouch\") and _is_crouching == false and is_on_floor() and TOGGLE_CROUCH == false: # hold to crouch
		crouching(true)
	if event.is_action_released(\"crouch\") and TOGGLE_CROUCH == false: # Release to uncrouch
		if CROUCH_SHAPECAST.is_colliding() == false:
			crouching(false)
		elif CROUCH_SHAPECAST.is_colliding() == true:
			uncrouch_check()


func _unhandled_input(event):
	_mouse_input = event is InputEventMouseMotion and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED
	if _mouse_input:
		_rotation_input = -event.relative.x * MOUSE_SENSITIVITY
		_tilt_input = -event.relative.y * MOUSE_SENSITIVITY


func _update_camera(delta):
	
	# Rotate camera using euler rotation
	_mouse_rotation.x += _tilt_input * delta
	_mouse_rotation.x = clamp(_mouse_rotation.x, TILT_LOWER_LIMIT, TILT_UPPER_LIMIT)
	_mouse_rotation.y += _rotation_input * delta
	
	_player_rotation = Vector3(0.0, _mouse_rotation.y, 0.0)
	_camera_rotation = Vector3(_mouse_rotation.x, 0.0, 0.0)
	
	CAMERA_CONTROLLER.transform.basis = Basis.from_euler(_camera_rotation)
	CAMERA_CONTROLLER.rotation.z = 0.0 # Avoid twisting camera
	
	global_transform.basis = Basis.from_euler(_player_rotation)
	
	_rotation_input = 0.0
	_tilt_input = 0.0


func _ready():
	Global.player = self # When the player controller loads, this refreneces itself to the global var	
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	
	_speed = SPEED_DEFAULT

	CROUCH_SHAPECAST.add_exception($\".\")

func _physics_process(delta):
	Global.debug.add_property(\"MovementSpeed\", _speed, 1) # This is adding this value to the debug pannel using the custom methods in the debug class
	if not is_on_floor():
		velocity.y -= gravity * delta
		
	_update_camera(delta)
	
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor() and _is_crouching == false:
		velocity.y = JUMP_VELOCITY

	var input_dir = Input.get_vector(\"left\", \"right\", \"forward\", \"backward\")
	var direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()

	if direction:
		velocity.x = lerp(velocity.x, direction.x * _speed, ACCELERATION)
		velocity.z = lerp(velocity.z, direction.z * _speed, ACCELERATION)
	else:
		velocity.x = move_toward(velocity.x, 0, DECELERATION)
		velocity.z = move_toward(velocity.z, 0, DECELERATION)

	move_and_slide()

func toggle_crouch():
	if _is_crouching == true and CROUCH_SHAPECAST.is_colliding() == false:
		crouching(false)
	elif _is_crouching == false:
		crouching(true)


func crouching(state : bool):
	match state:
		true: 
			ANIMATION_PLAYER.play(\"crouch\", 0, CROUCH_SPEED)
			set_movement_speed(\"crouching\")
		false:
			ANIMATION_PLAYER.play(\"crouch\", 0, -CROUCH_SPEED, true)
			set_movement_speed(\"default\")

# A function that checks if the player is colliding with something overhead
func uncrouch_check():
	if CROUCH_SHAPECAST.is_colliding() == false:
		crouching(false)
	if CROUCH_SHAPECAST.is_colliding() == true:
		await get_tree().create_timer(0.1).timeout # if crouching is still true, wait 0.1secs and check again.
		uncrouch_check()


func set_movement_speed(state: String):
	match state:
		\"default\":
			_speed = SPEED_DEFAULT
		\"crouching\":
			_speed = SPEED_CROUCH

func _on_animation_player_animation_started(anim_name):
	if anim_name == \"crouch\":
		_is_crouching = !_is_crouching
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_junof"]

[sub_resource type="GDScript" id="GDScript_w6yrh"]
script/source = "extends RayCast3D

@onready var prompt = $Prompt
@onready var rc_interact = $\".\"


func _physics_process(delta):
	prompt.text = \" \"
	if rc_interact.is_colliding():
		var detected = get_collider() # get the collider of the object that is overlapping with the raycast
		print(detected) # debugging
		
		# if it is of the class \"Interactable\"
		if detected is Interactable:
			prompt.text = detected.get_prompt()
			
			if Input.is_action_just_pressed(detected.prompt_action):
				detected.interact(owner)
"

[sub_resource type="LabelSettings" id="LabelSettings_k84gw"]
outline_size = 2
outline_color = Color(0, 0, 0, 1)

[sub_resource type="Animation" id="Animation_a76i6"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PlayerCollider:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 1, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CameraController:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 1.8, 0)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("PlayerCollider:shape:height")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [2.0]
}
tracks/3/type = "bezier"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("CameraController:position:x")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/4/type = "bezier"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("CameraController:position:y")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(1.8, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/5/type = "bezier"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("CameraController:position:z")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/6/type = "bezier"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("CameraController/Camera3D:position:x")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/7/type = "bezier"
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/path = NodePath("CameraController/Camera3D:position:y")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}
tracks/8/type = "bezier"
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/path = NodePath("CameraController/Camera3D:position:z")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/keys = {
"handle_modes": PackedInt32Array(0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0)
}

[sub_resource type="Animation" id="Animation_ahu35"]
resource_name = "crouch"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PlayerCollider:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 1, 0), Vector3(0, 0.75, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CameraController:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 1.8, 0), Vector3(0, 1, 0)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("PlayerCollider:shape:height")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [2.0, 1.5]
}

[sub_resource type="Animation" id="Animation_na44d"]
resource_name = "sprinting"
length = 1.2
loop_mode = 1
tracks/0/type = "bezier"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CameraController/Camera3D:position:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"handle_modes": PackedInt32Array(0, 0, 0, 0, 0, 0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0, 0.066, -0.0928437, -0.0145883, 0.107156, 0.0206566, 0.075, -0.0928437, 0.00251903, 0.107156, -0.00792391, -0.089568, -0.1, 0.012401, 0.101789, -0.00522149, -0.075, -0.0892656, -0.01261, 0.101789, 0.0396048, 0, -0.0946329, -0.0314792, 0.00178909, -0.000150325),
"times": PackedFloat32Array(0, 0.3, 0.5, 0.8, 1, 1.2)
}
tracks/1/type = "bezier"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CameraController/Camera3D:position:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"handle_modes": PackedInt32Array(0, 0, 0, 0, 0, 0),
"points": PackedFloat32Array(0, -0.25, 0, 0.2, 0.0161668, 0.066, -0.1, 0.000423409, 0.1, -0.0113249, -0.036, -0.0928437, 0.0071316, 0.107156, -0.00135329, 0.066, -0.192844, -0.0498332, 0.1, 0.0089083, -0.0210362, -0.0824091, -0.016365, 0.00715625, 0.00256281, 0, -0.1, 0.00180773, 0.25, 0),
"times": PackedFloat32Array(0, 0.3, 0.5, 0.8, 1, 1.2)
}
tracks/2/type = "bezier"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("CameraController/Camera3D:position:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"handle_modes": PackedInt32Array(0, 0, 0, 0, 0, 0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(0, 0.3, 0.5, 0.8, 1, 1.2)
}

[sub_resource type="Animation" id="Animation_gr53x"]
resource_name = "walking"
length = 2.0
loop_mode = 1
tracks/0/type = "bezier"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CameraController:position:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"handle_modes": PackedInt32Array(0, 0, 0, 0, 0),
"points": PackedFloat32Array(0.0149956, 0, 0, 0.25, 0, -0.000147734, -0.25, 0, 0.25, 0, -0.0148215, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0.0148782, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(-0.1, 0.5, 1, 1.5, 2)
}
tracks/1/type = "bezier"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("CameraController:position:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"handle_modes": PackedInt32Array(0, 0, 0, 0, 0),
"points": PackedFloat32Array(1.8, -0.25, 0, 0.2, 0.0290492, 1.90721, -0.25, 0, 0.25, 0, 1.8, -0.3, 0.0216911, 0.3, 0.0279981, 1.90829, -0.25, 0, 0.25, 0, 1.8, -0.3, 0.0311515, 0.25, 0),
"times": PackedFloat32Array(-0.1, 0.5, 1, 1.5, 2)
}
tracks/2/type = "bezier"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("CameraController:position:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"handle_modes": PackedInt32Array(0, 0, 0, 0, 0),
"points": PackedFloat32Array(0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0),
"times": PackedFloat32Array(-0.1, 0.5, 1, 1.5, 2)
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_7cjj6"]
_data = {
"RESET": SubResource("Animation_a76i6"),
"crouch": SubResource("Animation_ahu35"),
"sprinting": SubResource("Animation_na44d"),
"walking": SubResource("Animation_gr53x")
}

[sub_resource type="GDScript" id="GDScript_57wrr"]
script/source = "extends PanelContainer

@onready var property_container = %VBoxContainer

#var property
var frames_per_second : String

# Called when the node enters the scene tree for the first time.
func _ready():
	# Set the global reference to self in Global Singleton
	Global.debug = self
	# Hide debug pannel on load
	visible = false
	#add_debug_property(\"FPS\", frames_per_second)


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if visible: 
		frames_per_second = \".%2f\" % (1.0/delta) # This gets the frames per second every frame
		add_property(\"FPS\", frames_per_second, 2)


func _input(event):
	# Toggle the debug pannel
	if event.is_action_pressed(\"debug\"):
		visible = !visible


# Debug function to add and update property
func add_property(title : String, value, order):
	var target
	target = property_container.find_child(title, true, false) # Try to find Label node with same name
	
	if !target: # If there is no current Label node for property (i.e. inital load)
		target = Label.new() # Create new Label node 
		property_container.add_child(target) # Add new node as child to VBox container
		target.name = title # set name to title 
		target.text = target.name + \": \" + str(value) # Set the text value
	elif visible:
		target.text = title + \": \" + str(value) # Set the text value
		property_container.move_child(target, order)
	
"

[sub_resource type="GDScript" id="GDScript_4cvdx"]
script/source = "class_name StateMachine
extends Node

@export var CURRENT_STATE : State
var states: Dictionary = {}

# Called when the node enters the scene tree for the first time.
func _ready():
	# This loops through the child nodes and checks if they have a State class type. If they 
	# 	do, add them to a dictionary for further reference.	
	for child in get_children():
		if child is State:
			states[child.name] = child
			child.transition.connect(on_child_transition)
		else:
			push_warning(\"State machine contains incompatible child node.\")
	CURRENT_STATE.enter()


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	CURRENT_STATE.update(delta)
	Global.debug.add_property(\"Current State \", CURRENT_STATE.name, 2)


func _physics_process(delta):
	CURRENT_STATE.physics_update(delta)
	

# This proces controls whenever a state is entered or exited and ensures 
# 	that only one state can be active at a time.
func on_child_transition(new_state_name: StringName) -> void:
	var new_state = states.get(new_state_name)
	if new_state != null:
		if new_state != CURRENT_STATE:
			CURRENT_STATE.exit()
			new_state.enter()
			CURRENT_STATE = new_state
	else:
		push_warning(\"State does not exist.\")
"

[sub_resource type="GDScript" id="GDScript_o3eqt"]
script/source = "class_name IdlePlayerState
extends State

@export var ANIMATION : AnimationPlayer


# This function is called when this state is entered.
func enter () -> void: 
	ANIMATION.pause()


func update(delta):
	if Global.player.velocity.length() > 0.0 and Global.player.is_on_floor():
		transition.emit(\"WalkingPlayerState\")
"

[sub_resource type="GDScript" id="GDScript_fbjuq"]
script/source = "class_name WalkingPlayerState extends State

@export var ANIMATION : AnimationPlayer
@export var TOP_ANIM_SPEED: float = 2.2 # I had to change this value from 2.2 to 20 for things to work. Not sure why...

# This function is called when this state is entered.
func enter () -> void: 
	ANIMATION.play(\"walking\", -1.0, 1.0)
	Global.player._speed = Global.player.SPEED_DEFAULT

func update(delta):
	set_animation_speed(Global.player.velocity.length())
	if Global.player.velocity.length() == 0.0:
		transition.emit(\"IdlePlayerState\")

# This takes in the current speed of the player object and then scales the walking animation bassed on that speed.
func set_animation_speed(spd):
	var alpha = remap(spd, 0.0, Global.player.SPEED_DEFAULT, 0.0, 1.0)
	ANIMATION.speed_scale = lerp(0.0, TOP_ANIM_SPEED, alpha)


func _input(event) -> void:
	if event.is_action_pressed(\"sprint\") and Global.player.is_on_floor():
		transition.emit(\"SprintingPlayerState\")
"

[sub_resource type="GDScript" id="GDScript_qi58n"]
script/source = "class_name SprintingPlayerState extends State

@export var ANIMATION : AnimationPlayer
@export var TOP_ANIM_SPEED: float = 1.6 # Tweak this as needed


func enter() -> void:
	ANIMATION.play(\"sprinting\", 0.5, 1.0)
	Global.player._speed = Global.player.SPEED_SPRINTING


func update(delta):
	set_animation_speed(Global.player.velocity.length())


# This takes in the current speed of the player object and then scales the walking animation bassed on that speed.
func set_animation_speed(spd):
	var alpha = remap(spd, 0.0, Global.player.SPEED_SPRINTING, 0.0, 1.0)
	ANIMATION.speed_scale = lerp(0.0, TOP_ANIM_SPEED, alpha)


func _input(event) -> void:
	if event.is_action_released(\"sprint\"):
		transition.emit(\"WalkingPlayerState\")
"

[sub_resource type="SphereShape3D" id="SphereShape3D_smc2h"]

[node name="Player" type="CharacterBody3D" node_paths=PackedStringArray("CAMERA_CONTROLLER", "ANIMATION_PLAYER", "CROUCH_SHAPECAST")]
script = SubResource("GDScript_v670p")
CAMERA_CONTROLLER = NodePath("CameraController")
ANIMATION_PLAYER = NodePath("AnimationPlayer")
CROUCH_SHAPECAST = NodePath("CrouchDetection")

[node name="PlayerCollider" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("CapsuleShape3D_junof")

[node name="CameraController" type="Node3D" parent="."]
transform = Transform3D(0.405692, 0, 0, 0, 0.202211, 0, 0, 0, 0.395238, 0, 1.8, 0)

[node name="Camera3D" type="Camera3D" parent="CameraController"]

[node name="Weapon Rig" type="Node3D" parent="CameraController/Camera3D"]

[node name="heavy-repeater" parent="CameraController/Camera3D/Weapon Rig" instance=ExtResource("2_oh2r0")]
transform = Transform3D(-0.0997734, 0, -0.0067284, 0, 0.1, 0, 0.0067284, 0, -0.0997734, 0.458881, -0.409829, -0.487054)

[node name="ReflectionProbe" type="ReflectionProbe" parent="CameraController/Camera3D"]
update_mode = 1

[node name="RC_Interact" type="RayCast3D" parent="CameraController"]
target_position = Vector3(0, 0, -4)
script = SubResource("GDScript_w6yrh")

[node name="Prompt" type="Label" parent="CameraController/RC_Interact"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
text = "Message [Key]"
label_settings = SubResource("LabelSettings_k84gw")
horizontal_alignment = 1
vertical_alignment = 1
metadata/_edit_use_anchors_ = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_7cjj6")
}

[node name="UserInterface" type="Control" parent="."]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1
metadata/_edit_use_anchors_ = true

[node name="Reticle" type="CenterContainer" parent="UserInterface" node_paths=PackedStringArray("RETICLE_LINES", "PLAYER_CONTROLLER")]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("3_jll14")
RETICLE_LINES = [NodePath("Top"), NodePath("Right"), NodePath("Bottom"), NodePath("Left")]
PLAYER_CONTROLLER = NodePath("../..")
metadata/_edit_use_anchors_ = true

[node name="Top" type="Line2D" parent="UserInterface/Reticle"]
points = PackedVector2Array(0, -5, 0, -15)
width = 2.0

[node name="Right" type="Line2D" parent="UserInterface/Reticle"]
points = PackedVector2Array(5, 0, 15, 0)
width = 2.0

[node name="Bottom" type="Line2D" parent="UserInterface/Reticle"]
points = PackedVector2Array(0, 5, 0, 15)
width = 2.0

[node name="Left" type="Line2D" parent="UserInterface/Reticle"]
points = PackedVector2Array(-5, 0, -15, 0)
width = 2.0

[node name="DebugPannel" type="PanelContainer" parent="UserInterface"]
custom_minimum_size = Vector2(200, 0)
layout_mode = 0
offset_left = 10.0
offset_top = 10.0
offset_right = 210.0
offset_bottom = 50.0
theme = ExtResource("5_p0hi4")
script = SubResource("GDScript_57wrr")

[node name="MarginContainer" type="MarginContainer" parent="UserInterface/DebugPannel"]
layout_mode = 2

[node name="VBoxContainer" type="VBoxContainer" parent="UserInterface/DebugPannel/MarginContainer"]
unique_name_in_owner = true
layout_mode = 2

[node name="PlayerStateMachine" type="Node" parent="." node_paths=PackedStringArray("CURRENT_STATE")]
script = SubResource("GDScript_4cvdx")
CURRENT_STATE = NodePath("IdlePlayerState")

[node name="IdlePlayerState" type="Node" parent="PlayerStateMachine" node_paths=PackedStringArray("ANIMATION")]
script = SubResource("GDScript_o3eqt")
ANIMATION = NodePath("../../AnimationPlayer")

[node name="WalkingPlayerState" type="Node" parent="PlayerStateMachine" node_paths=PackedStringArray("ANIMATION")]
script = SubResource("GDScript_fbjuq")
ANIMATION = NodePath("../../AnimationPlayer")

[node name="SprintingPlayerState" type="Node" parent="PlayerStateMachine" node_paths=PackedStringArray("ANIMATION")]
script = SubResource("GDScript_qi58n")
ANIMATION = NodePath("../../AnimationPlayer")

[node name="CrouchDetection" type="ShapeCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.5, 0)
shape = SubResource("SphereShape3D_smc2h")
target_position = Vector3(0, 0.5, 0)
debug_shape_custom_color = Color(1, 0.0666667, 1, 1)

[connection signal="animation_started" from="AnimationPlayer" to="." method="_on_animation_player_animation_started"]
